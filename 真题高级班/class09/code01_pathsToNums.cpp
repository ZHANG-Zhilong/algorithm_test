#include <iostream>#include <vector>#include <algorithm>using namespace std;class PathsToNums {public:    static void pathToNum(vector<int> &arr) {        if (arr.empty()) {            return;        }        pathToDist(arr);        distToNum(arr);    }    static void pathToDist(vector<int> &arr) {        int capital = 0;        for (int i = 0; i < arr.size(); i++) {            if (arr[i] == i) {                capital = i;            } else if (arr[i] > -1) {                int pre = i;                int cur = arr[i];                arr[i] = -1;                while (arr[cur] != cur && arr[cur] > -1) {                    int next = arr[cur];                    arr[cur] = pre;                    pre = cur;                    cur = next;                }                int value = arr[cur] == cur ? 0 : arr[cur];                cur = pre;                while (arr[cur] != -1) {                    pre = arr[cur];                    arr[cur] = --value;                    cur = pre;                }                arr[cur] = --value;            }        }        arr[capital] = 0;    }    static void distToNum(vector<int> &arr) {        for (int i = 0; i < arr.size(); i++) {            if (arr[i] < 0) {                int cur = -arr[i];                arr[i] = 0;                while (arr[cur] < 0) {                    int next = abs(arr[cur]);                    arr[cur] = 1;                    cur = next;                }                arr[cur]++;            }            arr[0] = 1;//            int index = arr[i];//            if(index< 0){//                arr[i] = 0;////            }        }    }    static void printArr(const vector<int> &arr) {        for (const auto n : arr) {            cout << n << " ";        }        cout << endl;    }};int main(int argc, char *argv[]) {    vector<int> arr = {9, 1, 4, 9, 0, 4, 8, 9, 0, 1};//    PathsToNums::pathToNum(arr);//    PathsToNums::printArr(arr);    PathsToNums::pathToDist(arr);    PathsToNums::printArr(arr);    PathsToNums::distToNum(arr);    PathsToNums::printArr(arr);    return 0;}