#include <iostream>#include <vector>#include <random>#include <memory>using namespace std;class Code02_IsRotateStr {public:    static bool isRotation(const string &str1, const string &str2) {        if(str1.size()<str2.size() || str1.empty() || str2.empty()){            return false;        }        string str = str1 + str1;        return getIndexOf(str, str2) != -1;    }    static int getIndexOf(const string &str1, const string &str2) {        //判断str2是否是str1的子串        if (str1.size() < str2.size()) {            return -1;        }        int i1 = 0, i2 = 0;        vector<int> next = getNextArray(str2);        while (i1 < str1.size() && i2 < str2.size()) {            if (str1[i1] == str2[i2]) {                i1++;                i2++;            } else if (i2 > 0) {                i2 = next[i2];            } else {                i1++;            }        }        return i2 == str2.size() ? i1 - i2 : -1;    }    //    static vector<int> getNextArray(const string ms) {        if (ms.size() <= 1) {            return {-1};        }        vector<int> next(ms.size(), 0);        next[0] = -1;        next[1] = 0;        int cn = 0, i = 2;        while (i < ms.size()) {            if (ms[cn] == ms[i - 1]) {                next[i++] = ++cn;            } else if (cn > 0) {                cn = next[cn];            } else {                next[i++] = 0;            }        }        return next;    }};class getRandom {public:    static vector<int> getRandomArray(const int from, const int to, const int len) {        if (to < from || len < 1) {            return {};        }        random_device rd;        int range = to - from;        vector<int> ret(len, 0);        for (auto &n : ret) {            n = (double) rd() / rd.max() * range + from;        }        cout << endl;        return ret;    }    static vector<vector<int>> getRandomMatrix(const int M, const int N, const int from, const int to) {        if (M <= 1 || N <= 1 || from > to) {            cerr << "input error @ getRandomMatrix" << endl;            return {};        }        vector<vector<int>> matrix;        for (int i = 0; i < M; i++) {            matrix.push_back(getRandomArray(from, to, N));        }        return matrix;    }    static void printArr(const vector<int> arr) {        if (arr.empty()) {            return;        }        for (const auto &n : arr) {            cout << n << " ";        }        cout << endl;    }    static void printMatrix(const vector<vector<int>> &matrix) {        for (const auto &m : matrix) {            for (const auto &n : m) {                cout << n << " ";            }            cout << endl;        }        cout << endl;    }};void play() {    string str1 = "yunzuocheng";    string str2 = "zuochengyun";    cout<<Code02_IsRotateStr::isRotation(str1, str2);}int main(int argc, char *argv[]) {    play();    return 0;}