#include <iostream>#include <vector>#include <memory>#include <algorithm>using namespace std;class Code03_FindNumSortedMatrix {public:    static bool isContain(const vector<vector<int>> &matrix, int k) {        if (matrix.empty() || matrix[0].empty()) {            return false;        }        const int M = matrix.size(), N = matrix[0].size();        int row = 0, col = N - 1;        while (row < M && col >= 0) {            if (matrix[row][col] > k) {                row--;            } else if (matrix[row][col] < k) {                col++;            } else if (matrix[row][col] == k) {                return true;            }        }        return false;    }    static int getMaxLen(const vector<vector<int>> &matrix) {        if (matrix.empty() || matrix[0].empty()) {            return -1;        }        const int M = matrix.size(), N = matrix[0].size();        int maxLen = 0;        int row = 0, col = N - 1;        while (row < M && col >= 0) {            if (matrix[row][col] == 1) {                col--;                maxLen++;            } else if (matrix[row][col] == 0) {                row++;            }        }        return maxLen;    }};void play() {    vector<vector<int>> matrix{            {0, 0, 0, 1, 1, 1},            {0, 0, 1, 1, 1, 1},            {0, 0, 1, 1, 1, 1},            {0, 0, 0, 1, 1, 1}    };    vector<vector<int>> matrix2{            {0,   1,   2,   3,   4,   5,   6},// 0            {10,  12,  13,  15,  16,  17,  18},// 1            {23,  24,  25,  26,  27,  28,  29},// 2            {44,  45,  46,  47,  48,  49,  50},// 3            {65,  66,  67,  68,  69,  70,  71},// 4            {96,  97,  98,  99,  100, 111, 122},// 5            {166, 176, 186, 187, 190, 195, 200},// 6            {233, 243, 321, 341, 356, 370, 380}    }; // 7    int k = 233;    if (Code03_FindNumSortedMatrix::isContain(matrix2, k)) {        cout << "found" << endl;    }    cout << Code03_FindNumSortedMatrix::getMaxLen(matrix);}int main(int argc, char *argv[]) {    play();    return 0;}