#include <iostream>#include <vector>#include <algorithm>#include <random>using namespace std;class Code04_MaxABSBetweenLeftAndRight {public:    //对于任意一个子数组，长度增加，最大值只可能增加，不可能减小，因此子数组越短，最大值越小。    //左侧子数组一定包含arr.front(), right sub-array include arr.back()    //the question is, which size include only one element?    static int maxAbs(const vector<int> &arr) {        if (arr.empty()) {            return -1;        }        int maxBox = 0;        for (const auto &ele : arr) {            maxBox = maxBox > ele ? maxBox : ele;        }        return max(maxBox - arr.front(), maxBox - arr.back());    }    static vector<int> generateRandomArray(const int N) {        if (N < 0) {            return {};        }        random_device rd;        vector<int> ret(N, 0);        for (auto &n : ret) {            n = static_cast<int>((double) rd() / rd.max() * 100);        }        for (const auto &n : ret) {            cout << n << "\t";        }        return ret;    }};void play() {    vector<int> arr = Code04_MaxABSBetweenLeftAndRight::generateRandomArray(12);    cout << endl << Code04_MaxABSBetweenLeftAndRight::maxAbs(arr);}int main(int argc, char *argv[]) {    play();    return 0;}