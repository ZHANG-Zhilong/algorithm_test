#include <iostream>#include <vector>#include <memory>#include <algorithm>using namespace std;class Code02_RotateMatrix {public:    static void rotate(vector<vector<int>> &matrix) {        if (matrix.empty() || matrix[0].empty()) {            return;        }        int a = 0, b = 0, c = (int) matrix.size() - 1, d = (int) matrix[0].size() - 1;        while (a < c) {            rotateEdge(matrix, a++, b++, c--, d--);        }    }    static void rotateEdge(vector<vector<int>> &matrix, int a, int b, int c, int d) {        int temp = 0;        for (int i = 0; i < d - b; i++) {            temp = matrix[a][b + i];            matrix[a][b + i] = matrix[c - i][b];            matrix[c - i][b] = matrix[c][d - i];            matrix[c][d - i] = matrix[a + i][d];            matrix[a + i][d] = temp;        }    }    static void printMatrix(vector<vector<int>> &matrix) {        for (const auto &row: matrix) {            for (const auto &col: row) {                cout << col << "\t";            }            cout << endl;        }        cout << endl << endl;    }};void play() {    vector<vector<int>> matrix{            {1,  2,  3,  4},            {5,  6,  7,  8},            {9,  10, 11, 12},            {13, 14, 15, 16}    };    Code02_RotateMatrix::rotate(matrix);    Code02_RotateMatrix::printMatrix(matrix);}int main(int argc, char *argv[]) {    play();    return 0;}