#include <iostream>#include <vector>#include <memory>#include <algorithm>using namespace std;//网络字节流的处理办法//单节点处理，解决单节点中瓶颈最大值//业务向class Code01_PackingMachine {public:    static int minOpts(const vector<int> &arr) {        if (arr.size() <= 1) {            return -1;        }        const int N = arr.size();        vector<int> arrSum(N, 0);        arrSum[0] = arr[0];        for (int i = 1; i < N; i++) {            arrSum[i] = arrSum[i - 1] + arr[i];        }        int boxNeeds = arrSum.back() / N;        if (arrSum.back() % N != 0) {            return -1;        }        int a = 0, b = 0, c = 0, d = 0;        int ret = 0;        //a: left has, b:left needs, c:right has, d:right needs        //except i        for (int i = 1; i < N; i++) {            a = arrSum[i - 1];            b = boxNeeds * (i);            c = arrSum.back() - arrSum[i];            d = boxNeeds * (N - 1 - i);            if (a - b < 0 && c - d < 0) {                ret = max(ret, abs(a - b) + abs(c - d));            } else {                ret = max({ret, abs(a - b), abs(c - d)});            }        }        return ret;    }    static int minOpts2(const vector<int> &arr) {        if (arr.size() <= 1) {            return -1;        }        const int N = arr.size();        int arrSum = 0;        for (const auto &n:arr) {            arrSum += n;        }        int boxNeed = arrSum / N;        if (arrSum % N != 0) {            return -1;        }        int ret = 0;        int left = 0, right = 0, leftSum = 0;        // left = leftHas - leftBox * leftBoxNum        // right= rightHas - rightBox * rightBoxNum        //left < 0 be delivered, > 0 deliver out        for (int i = 0; i < N; i++) {            left = leftSum - boxNeed * i;            leftSum += arr[i];            right = (arrSum - leftSum) - boxNeed * (N - i - 1);            if (left < 0 && right < 0) {                ret = max(ret, abs(left) + abs(right));            } else {                ret = max({ret, abs(left), abs(right)});            }        }        return ret;    }};void play() {    vector<int> arr{3, 10, 3, 5, 4, 3, 6, 8, 6, 4, 3};    cout << Code01_PackingMachine::minOpts(arr);}int main(int argc, char *argv[]) {    play();    return 0;}